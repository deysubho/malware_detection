import hashlib
import os
import logging
from datetime import datetime

HASHES_FILE = 'hashes.txt'
LOG_FILE = 'file_integrity_log.txt'

logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s [%(levelname)s]: %(message)s')

def calculate_hash(file_path, algorithm='sha256'):
    hasher = hashlib.new(algorithm)
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hasher.update(chunk)
    return hasher.hexdigest()

def save_hash(file_path, hash_value):
    with open(HASHES_FILE, 'a') as f:
        f.write(f"{file_path}:{hash_value}\n")

def load_hashes():
    hashes = {}
    if os.path.isfile(HASHES_FILE):
        with open(HASHES_FILE, 'r') as f:
            for line in f:
                parts = line.strip().split(':')
                if len(parts) == 2:
                    hashes[parts[0]] = parts[1]
    return hashes

def log_event(message, level='info'):
    if level == 'info':
        logging.info(message)
    elif level == 'warning':
        logging.warning(message)

def check_file_integrity(file_path, stored_hashes):
    if not os.path.isfile(file_path):
        log_event(f"Error: {file_path} is not a valid file.", 'warning')
        return

    current_hash = calculate_hash(file_path, algorithm='sha256')

    if file_path in stored_hashes:
        stored_hash = stored_hashes[file_path]
        if stored_hash != current_hash:
            log_event(f"Warning: {file_path} may have been modified. Current hash: {current_hash}", 'warning')
        else:
            log_event(f"{file_path} is unchanged.")
    else:
        log_event(f"New file detected: {file_path}. Hash: {current_hash}")
        save_hash(file_path, current_hash)

def main():
    file_path_to_check = input("Enter the file path to check: ")
    stored_hashes = load_hashes()
    check_file_integrity(file_path_to_check, stored_hashes)

if __name__ == "__main__":
    main()
